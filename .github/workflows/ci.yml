name: CI for Django Backend

# This workflow runs on every push to the 'main' branch
# and on pull requests targeting the 'main' branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs to be executed in this workflow
jobs:
  build_and_test:
    # Specify the operating system for the runner (virtual machine)
    runs-on: ubuntu-latest

    # Steps define the sequence of tasks to be executed in the job
    steps:
    - name: Checkout code # Step to get your repository's code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx # Recommended for efficient Docker builds
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for Backend # Build the Django application image
      # The context ('.') is the current directory (ecommerce_backend).
      # The Dockerfile is located at ./Dockerfile.
      # We tag the image with a standard name for the workflow.
      run: docker build -t ecommerce-backend-ci .

    - name: Run Django Tests in Docker Container # Execute tests inside the built image
      # This step starts a temporary container from the image built above.
      # It connects it to a temporary PostgreSQL service (for testing purposes only in CI).
      # It then runs `python manage.py test` inside the backend container.
      # Note: We need a temporary DB for tests to run.
      run: |
        # Start a temporary PostgreSQL container for tests
        docker run -d --name temp_db_for_tests \
          -e POSTGRES_DB=test_db \
          -e POSTGRES_USER=test_user \
          -e POSTGRES_PASSWORD=test_password \
          postgres:16-alpine

        # Run Django tests inside the backend container, linking to the temp DB
        # This command runs `python manage.py test` and exits.
        # It links the backend container to the temporary database container.
        # We also need to set the DATABASE_URL (or individual DB env vars)
        # for django-environ in the CI environment.
        docker run --rm \
          --link temp_db_for_tests:db \
          -e DB_NAME=test_db \
          -e DB_USER=test_user \
          -e DB_PASSWORD=test_password \
          -e DB_HOST=db \
          -e DB_PORT=5432 \
          ecommerce-backend-ci python manage.py test

        # Clean up the temporary database container (optional, but good practice for isolated runs)
        docker stop temp_db_for_tests
        docker rm temp_db_for_tests
