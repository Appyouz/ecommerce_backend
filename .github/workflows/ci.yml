
name: CI for Django Backend

# This workflow runs on every push to the 'main' branch
# and on pull requests targeting the 'main' branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs to be executed in this workflow
jobs:
  build_and_test:
    # Specify the operating system for the runner (virtual machine)
    runs-on: ubuntu-latest

    # Steps define the sequence of tasks to be executed in the job
    steps:
    - name: Checkout code # Step to get your repository's code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx # Recommended for efficient Docker builds
      uses: docker/setup-buildx-action@v3

    # NEW COMBINED STEP: Build, Login & Push Docker image to Docker Hub
    # This replaces the separate login, build, and push steps.
    - name: Build & push Docker image for Backend
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend # Your Docker Hub username / image name
        tags: latest # Tag the image as 'latest'
        registry: docker.io # The registry URL for Docker Hub
        dockerfile: Dockerfile # Your Dockerfile is named 'Dockerfile' not 'Dockerfile.ci'
        username: ${{ secrets.DOCKER_USERNAME }} 

    - name: Run Django Tests in Docker Container # Execute tests inside the built image
      # This step starts a temporary container from the image built above.
      # The image is now tagged with your Docker Hub username by the previous step.
      run: |
        IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/ecommerce-backend
        # Start a temporary PostgreSQL container for tests
        docker run -d --name temp_db_for_tests \
          -e POSTGRES_DB=test_db \
          -e POSTGRES_USER=test_user \
          -e POSTGRES_PASSWORD=test_password \
          postgres:16-alpine

        # Run Django tests inside the backend container, linking to the temp DB.
        docker run --rm \
          --link temp_db_for_tests:db \
          -e DB_NAME=test_db \
          -e DB_USER=test_user \
          -e DB_PASSWORD=test_password \
          -e DB_HOST=db \
          -e DB_PORT=5432 \
          ${IMAGE_NAME}:latest python manage.py test

        # Clean up the temporary database container (stops and removes it)
        docker stop temp_db_for_tests
        docker rm temp_db_for_tests
